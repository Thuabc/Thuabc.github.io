<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://thuabc.github.io</id>
    <title>Tanghua&apos;s Blogs</title>
    <updated>2019-12-17T06:53:13.823Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://thuabc.github.io"/>
    <link rel="self" href="https://thuabc.github.io/atom.xml"/>
    <subtitle>学而不思则罔</subtitle>
    <logo>https://thuabc.github.io/images/avatar.png</logo>
    <icon>https://thuabc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Tanghua&apos;s Blogs</rights>
    <entry>
        <title type="html"><![CDATA[Binary Sort]]></title>
        <id>https://thuabc.github.io/post/er-fen-cha-zhao</id>
        <link href="https://thuabc.github.io/post/er-fen-cha-zhao">
        </link>
        <updated>2019-12-16T15:56:57.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法，前提是数据结构必须先排好序，可以在数据规模的对数时间复杂度内完成查找。但是，二分查找要求线性表具有有随机访问的特点（例如数组），也要求线性表能够根据中间元素的特点推测它两侧元素的性质，以达到缩减问题规模的效果。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p>
<pre><code class="language-java">//不使用递归实现（while循环）
/**
 * 二分查找，找到该值在数组中的下标，否则返回-1
 */
static int binarySerach(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;
    
    if(key &lt; arr[low] || key &gt; arr[high] || low &gt; high){
			return -1;				
		}
    
    // 这里必须是 &lt;=
    while (left &lt;= right) {
        int mid = (left + right) / 2;
        if (array[mid] == key) {
            return mid;
        }
        else if (array[mid] &lt; key) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }

    return -1;
}
</code></pre>
<pre><code class="language-java">//递归实现
public static int recursionBinarySearch(int[] arr,int key,int low,int high){
		
		if(key &lt; arr[low] || key &gt; arr[high] || low &gt; high){
			return -1;				
		}
		
		int middle = (low + high) / 2;			//初始中间位置
		if(arr[middle] &gt; key){
			//比关键字大则关键字在左区域
			return recursionBinarySearch(arr, key, low, middle - 1);
		}else if(arr[middle] &lt; key){
			//比关键字小则关键字在右区域
			return recursionBinarySearch(arr, key, middle + 1, high);
		}else {
			return middle;
		}	
		
	}
</code></pre>
<h3 id="二分查找总结">二分查找总结</h3>
<pre><code class="language-java">// 这里必须是 &lt;=
while (left &lt;= right) {
    int mid = (left + right) / 2;
    if (array[mid] ? key) {//2.判断出比较符号
        //... right = mid - 1;
    }
    else {
        // ... left = mid + 1;
    }
}
return xxx;//1.首先判断返回left，还是right
</code></pre>
<h3 id="时间复杂度">时间复杂度</h3>
<p>采用的是分治策略</p>
<p>最坏的情况下两种方式时间复杂度一样：O(log2N)</p>
<p>最好情况下为：O(1)</p>
<h3 id="空间复杂度">空间复杂度</h3>
<p>算法的空间复杂度并不是计算实际占用的空间，而是计算整个算法的辅助空间单元的个数</p>
<p>非递归方式：<br>
由于辅助空间是常数级别的，所以：<br>
空间复杂度是O(1);</p>
<p>递归方式：</p>
<p>递归的次数和深度都是log2 N,每次所需要的辅助空间都是常数级别的，所以：<br>
空间复杂度：O(log2N )</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ListNode-Leetcode]]></title>
        <id>https://thuabc.github.io/post/listnode-leetcode-java</id>
        <link href="https://thuabc.github.io/post/listnode-leetcode-java">
        </link>
        <updated>2019-12-16T12:39:26.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="leetcode-19-删除链表的倒数第n个节点">😃LeetCode <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第N个节点</a></h3>
<pre><code class="language-java">//两次遍历法
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        int length  = 0;
        ListNode first = head;
        while (first != null) {
            length++;
            first = first.next;
        }
        length -= n;
        first = dummy;
        while (length &gt; 0) {
            length--;
            first = first.next;
        }
        first.next = first.next.next;
        return dummy.next;
    }
}
</code></pre>
<h3 id="leetcode-24-两两交换链表中的节点">😁LeetCode <a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h3>
<pre><code class="language-java">class Solution {
    public ListNode swapPairs(ListNode head) {
        //头插法
        ListNode dumb = new ListNode(0);
        dumb.next = head;
        ListNode temp = dumb;
        while(temp.next!=null&amp;&amp;temp.next.next!=null){
            ListNode start = temp.next;
            ListNode end = temp.next.next;
            temp.next = end;
            start.next = end.next;
            end.next = start;
            temp = start;
        }
        return dumb.next;   
    }
}
</code></pre>
<h3 id="leecode-83-删除排序链表中的重复元素">LeeCode <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h3>
<pre><code class="language-java">class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        //这里不用哑结点
        ListNode cur = head;
        while(cur != null &amp;&amp; cur.next != null){
            if(cur.next.val == cur.val){
                cur.next = cur.next.next;
            }else{
                cur = cur.next;
            }
        }
        return head;   
    }
}
</code></pre>
<h3 id="leetcode-141-环形链表">LeetCode <a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h3>
<pre><code class="language-java"> //HashSet解法：add, remove,isEmpty,contains,clear,size
 /**
public class Solution {
    public boolean hasCycle(ListNode head) {
       HashSet&lt;ListNode&gt; hasExist = new HashSet&lt;&gt;();
       while(head != null){
           if(hasExist.contains(head)){
               return true;
           }else{
               hasExist.add(head);
               head = head.next;
           }
       }
        return false;
    }
}
 */
//双指针解法
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null||head.next==null){
            return false;
        }
        //快慢指针
        ListNode slow = head;
        ListNode fast = head.next;
        //循环终止条件：slow==fast
        while(slow!=fast){
            if(fast==null||fast.next==null){
                return false;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }
}
</code></pre>
<h3 id="leetcode-203-移除链表元素">LeetCode <a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h3>
<pre><code class="language-java">//头插法
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        //因为head.val可能等于val,所以需要new一个哑结点，并且指向头结点
        ListNode dumb = new ListNode(0);
        dumb.next = head;
        //用于遍历链表的指针
        ListNode cur = dumb;
        //循环条件cur.next!=null
        while(cur.next!=null){
            if(cur.next.val==val){
                cur.next = cur.next.next;   
            }else{//这里要用else,因为存在连续等于val的结点
                cur = cur.next;
            }
        }
        return dumb.next;     
    }
}
</code></pre>
<h3 id="leetcode-206-反转链表">LeetCode <a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h3>
<pre><code class="language-java">//迭代法
class Solution {
    public ListNode reverseList(ListNode head) {
        //头结点指向null
        ListNode prev = null;
        ListNode temp = head;
        while(temp!=null){
			ListNode nextTemp = temp.next;
            temp.next = prev;
            prev = temp;
            temp = nextTemp;
        }
        return prev;
    }
}
</code></pre>
<h3 id="leetcode-876-链表的中间结点">LeetCode <a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h3>
<pre><code class="language-java">class Solution {
    public ListNode middleNode(ListNode head) {
        //快慢指针
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null&amp;&amp;fast.next!=null){
            //慢指针走一步快指针走两步
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;  
    }
}
</code></pre>
<p>头插法，哑巴结点（dumb，dumb.next=head)，遍历指针（temp=head，或temp=dumb）(temp=temp.next），循环条件(temp!=null，temp.next!=null），快慢指针，删除结点（temp.next=temp.next.next）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://thuabc.github.io/post/hello-gridea</id>
        <link href="https://thuabc.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://thuabc.github.io/post-images/1576513014433.png" alt=""></figure>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://thuabc.github.io/post-images/1576513014433.png" alt=""></figure>
<!-- more -->
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>